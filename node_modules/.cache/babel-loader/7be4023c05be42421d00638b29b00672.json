{"ast":null,"code":"var _jsxFileName = \"/Users/Queen/Documents/GitHub/rpsGame/src/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, createContext, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport Header from './Header';\nimport { randomNumber } from './randomNumber';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ScoreContext = /*#__PURE__*/createContext(null);\n\nfunction App() {\n  _s();\n\n  const outcomes = [\"rock\", \"paper\", \"scissors\"];\n  const [outcome, setOutcome] = useState();\n  const [random, setRandom] = useState(randomNumber(outcomes));\n  const [playerScore, setPlayerScore] = useState(10);\n  const [compScore, setCompScore] = useState(0);\n  const [playerChoice, setPlayerChoice] = useState();\n  const [compChoice, setCompChoice] = useState();\n  const [buttonClick, setButtonClick] = useState(false);\n\n  const generateTurn = () => {\n    setCompChoice('Thinking...');\n    let timeout = setTimeout(() => {\n      const secondRandom = randomNumber(outcomes);\n      setRandom(secondRandom);\n\n      if (random == outcomes.length) {\n        return setCompChoice(outcomes[0]);\n      } else {\n        return setCompChoice(outcomes[randomNumber(outcomes)]);\n      }\n    }, 2000);\n  };\n\n  useEffect(() => {});\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ScoreContext.Provider, {\n      value: {\n        playerScore,\n        setPlayerScore,\n        compScore,\n        setCompScore\n      },\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          alignSelf: \"center\",\n          margin: \"0 auto\",\n          textAlign: \"center\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: compChoice\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: generateTurn,\n          children: \"Outcome\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(App, \"boLUEvHKpVNr0UoP7c1hnLoTwNM=\");\n\n_c = App;\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 54,\n  columnNumber: 17\n}, this), document.getElementById('root'));\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Queen/Documents/GitHub/rpsGame/src/index.js"],"names":["React","useState","createContext","useEffect","ReactDOM","Header","randomNumber","ScoreContext","App","outcomes","outcome","setOutcome","random","setRandom","playerScore","setPlayerScore","compScore","setCompScore","playerChoice","setPlayerChoice","compChoice","setCompChoice","buttonClick","setButtonClick","generateTurn","timeout","setTimeout","secondRandom","length","alignSelf","margin","textAlign","render","document","getElementById"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,aAA1B,EAAyCC,SAAzC,QAA0D,OAA1D;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,SAASC,YAAT,QAA6B,gBAA7B;;;AAEA,OAAO,MAAMC,YAAY,gBAAGL,aAAa,CAAC,IAAD,CAAlC;;AAEP,SAASM,GAAT,GAAgB;AAAA;;AACZ,QAAMC,QAAQ,GAAG,CAAC,MAAD,EAAS,OAAT,EAAkB,UAAlB,CAAjB;AAEA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,EAAtC;AACA,QAAM,CAACW,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAACK,YAAY,CAACG,QAAD,CAAb,CAApC;AAEA,QAAM,CAACK,WAAD,EAAcC,cAAd,IAAgCd,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACe,SAAD,EAAYC,YAAZ,IAA4BhB,QAAQ,CAAC,CAAD,CAA1C;AAEA,QAAM,CAACiB,YAAD,EAAeC,eAAf,IAAkClB,QAAQ,EAAhD;AACA,QAAM,CAACmB,UAAD,EAAaC,aAAb,IAA8BpB,QAAQ,EAA5C;AAEA,QAAM,CAACqB,WAAD,EAAcC,cAAd,IAAgCtB,QAAQ,CAAC,KAAD,CAA9C;;AAEA,QAAMuB,YAAY,GAAG,MAAM;AAEvBH,IAAAA,aAAa,CAAC,aAAD,CAAb;AAEA,QAAII,OAAO,GAAGC,UAAU,CAAC,MAAM;AAE3B,YAAMC,YAAY,GAAGrB,YAAY,CAACG,QAAD,CAAjC;AACAI,MAAAA,SAAS,CAACc,YAAD,CAAT;;AACA,UAAIf,MAAM,IAAIH,QAAQ,CAACmB,MAAvB,EAA+B;AAC3B,eAAOP,aAAa,CAACZ,QAAQ,CAAC,CAAD,CAAT,CAApB;AACH,OAFD,MAEO;AACH,eAAOY,aAAa,CAACZ,QAAQ,CAACH,YAAY,CAACG,QAAD,CAAb,CAAT,CAApB;AACH;AACJ,KATuB,EASrB,IATqB,CAAxB;AAUH,GAdD;;AAgBAN,EAAAA,SAAS,CAAC,MAAM,CAEf,CAFQ,CAAT;AAIA,sBAAO;AAAA,2BACH,QAAC,YAAD,CAAc,QAAd;AAAuB,MAAA,KAAK,EAAE;AAACW,QAAAA,WAAD;AAAcC,QAAAA,cAAd;AAA8BC,QAAAA,SAA9B;AAAyCC,QAAAA;AAAzC,OAA9B;AAAA,8BACI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAK,QAAA,KAAK,EAAE;AAACY,UAAAA,SAAS,EAAE,QAAZ;AAAsBC,UAAAA,MAAM,EAAE,QAA9B;AAAwCC,UAAAA,SAAS,EAAE;AAAnD,SAAZ;AAAA,gCACI;AAAA,oBAAKX;AAAL;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAQ,UAAA,OAAO,EAAEI,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADG,mBAAP;AASH;;GA3CQhB,G;;KAAAA,G;AA6CTJ,QAAQ,CAAC4B,MAAT,eAAgB,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,QAAhB,EAAyBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB","sourcesContent":["import React, { useState, createContext, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport Header from './Header';\n\nimport { randomNumber } from './randomNumber';\n\nexport const ScoreContext = createContext(null);\n\nfunction App () { \n    const outcomes = [\"rock\", \"paper\", \"scissors\"];\n\n    const [outcome, setOutcome] = useState();\n    const [random, setRandom] = useState(randomNumber(outcomes));\n\n    const [playerScore, setPlayerScore] = useState(10);\n    const [compScore, setCompScore] = useState(0);\n\n    const [playerChoice, setPlayerChoice] = useState();\n    const [compChoice, setCompChoice] = useState();\n\n    const [buttonClick, setButtonClick] = useState(false);\n \n    const generateTurn = () => {\n\n        setCompChoice('Thinking...')\n\n        let timeout = setTimeout(() => {\n            \n            const secondRandom = randomNumber(outcomes);\n            setRandom(secondRandom);\n            if (random == outcomes.length) {\n                return setCompChoice(outcomes[0]);\n            } else {\n                return setCompChoice(outcomes[randomNumber(outcomes)]);\n            }\n        }, 2000)\n    }\n\n    useEffect(() => {\n        \n    })\n\n    return(<>\n        <ScoreContext.Provider value={{playerScore, setPlayerScore, compScore, setCompScore}}>\n            <Header />\n            <div style={{alignSelf: \"center\", margin: \"0 auto\", textAlign: \"center\"}}>\n                <h1>{compChoice}</h1>\n                <button onClick={generateTurn}>Outcome</button>\n            </div>\n        </ScoreContext.Provider>\n    </>)\n}\n\nReactDOM.render(<App />, document.getElementById('root'))"]},"metadata":{},"sourceType":"module"}