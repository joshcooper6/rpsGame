{"ast":null,"code":"var _jsxFileName = \"/Users/Queen/Documents/GitHub/rpsGame/src/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, createContext, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport Header from './Header';\nimport Game from './Game';\nimport { icons } from './data';\nimport { randomNumber } from './randomNumber';\nimport { winningRules } from './winningRules';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ScoreContext = /*#__PURE__*/createContext(null);\n\nfunction App() {\n  _s();\n\n  const outcomes = ['rock', 'paper', 'scissors'];\n  const [outcome, setOutcome] = useState();\n  const [random, setRandom] = useState(randomNumber(outcomes));\n  const [playerScore, setPlayerScore] = useState(0);\n  const [compScore, setCompScore] = useState(0);\n  const [playerChoice, setPlayerChoice] = useState();\n  const [compChoice, setCompChoice] = useState();\n  const [playerImage, setPlayerImage] = useState('');\n  const [compImage, setCompImage] = useState('');\n  const [bClick, setBClick] = useState(false);\n\n  const handleChange = input => {\n    setBClick(!bClick);\n    setOutcome('Thinking...');\n    setRandom(randomNumber(outcomes));\n    setCompChoice(outcomes[random]);\n    setPlayerChoice(input);\n    let a = icons.filter(icon => playerChoice == icon.name);\n    let b = icons.filter(icon => compChoice == icon.name);\n    setCompImage(b[0].src);\n    setPlayerImage(a[0].src);\n    console.log(compImage, playee);\n  };\n\n  console.log(compImage, playerImage);\n  useEffect(() => {\n    let timeout = setTimeout(() => {\n      if (winningRules(playerChoice, compChoice) == 'win') {\n        setOutcome('Player Wins!');\n        setPlayerScore(prevScore => prevScore + 1);\n      } else if (winningRules(playerChoice, compChoice) == 'lose') {\n        setOutcome('Computer Wins!');\n        setCompScore(prevScore => prevScore + 1);\n      } else if (winningRules(playerChoice, compChoice) == 'draw') {\n        setOutcome(`It's a draw...`);\n      }\n    }, 2000);\n  }, [bClick]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ScoreContext.Provider, {\n      value: {\n        playerScore,\n        outcome,\n        compChoice,\n        playerChoice,\n        handleChange\n      },\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(App, \"arQO2zUVOI8BffUyU4UGsoplxSY=\");\n\n_c = App;\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 68,\n  columnNumber: 17\n}, this), document.getElementById('root'));\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Queen/Documents/GitHub/rpsGame/src/index.js"],"names":["React","useState","createContext","useEffect","ReactDOM","Header","Game","icons","randomNumber","winningRules","ScoreContext","App","outcomes","outcome","setOutcome","random","setRandom","playerScore","setPlayerScore","compScore","setCompScore","playerChoice","setPlayerChoice","compChoice","setCompChoice","playerImage","setPlayerImage","compImage","setCompImage","bClick","setBClick","handleChange","input","a","filter","icon","name","b","src","console","log","playee","timeout","setTimeout","prevScore","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState, createContext, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport Header from './Header';\nimport Game from './Game'\nimport { icons } from './data';\n\nimport { randomNumber } from './randomNumber';\nimport { winningRules } from './winningRules';\n\nexport const ScoreContext = createContext(null);\n\nfunction App() { \n    const outcomes = ['rock', 'paper', 'scissors'];\n\n    const [outcome, setOutcome] = useState();\n    const [random, setRandom] = useState(randomNumber(outcomes));\n\n    const [playerScore, setPlayerScore] = useState(0);\n    const [compScore, setCompScore] = useState(0);\n\n    const [playerChoice, setPlayerChoice] = useState();\n    const [compChoice, setCompChoice] = useState();\n\n    const [playerImage, setPlayerImage] = useState('');\n    const [compImage, setCompImage] = useState('');\n\n    const [bClick, setBClick] = useState(false);\n\n    const handleChange = (input) => {\n        setBClick(!bClick);\n        setOutcome('Thinking...');\n        setRandom(randomNumber(outcomes))\n        setCompChoice(outcomes[random]);\n        setPlayerChoice(input);\n\n        let a = icons.filter((icon) => playerChoice == icon.name);\n        let b = icons.filter((icon) => compChoice == icon.name);\n\n        setCompImage(b[0].src);\n        setPlayerImage(a[0].src);\n        console.log(compImage, playee)\n    };\n\n    console.log(compImage, playerImage)\n\n    useEffect(() => {\n        let timeout = setTimeout(() => {\n            if (winningRules(playerChoice, compChoice) == 'win') {\n                setOutcome('Player Wins!')\n                setPlayerScore((prevScore) => prevScore + 1)\n            } else if (winningRules(playerChoice, compChoice) == 'lose') {\n                setOutcome('Computer Wins!')\n                setCompScore((prevScore) => prevScore + 1)\n            } else if (winningRules(playerChoice, compChoice) == 'draw') {\n                setOutcome(`It's a draw...`)\n            }\n        }, 2000)\n    }, [bClick])\n\n    return(<>\n        <ScoreContext.Provider value={{playerScore, outcome, compChoice, playerChoice, handleChange}}>\n            <Header />\n            <Game />\n        </ScoreContext.Provider>\n    </>)\n}\n\nReactDOM.render(<App />, document.getElementById('root'))"]},"metadata":{},"sourceType":"module"}